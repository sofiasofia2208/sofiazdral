png("PCA_RawData.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
PCA_RawData<-plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue"))
dev.off()
png("PCA_RawData.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
PCA_RawData<-plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue"))
PCA_RawData
dev.off()
boxplot(rawData, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)), main="Distribution of raw intensity values")
boxplot(rawData, cex.axis=0.5, las=2, which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3),
rep("yellow", 3)),
main="Distribution of raw intensity values")
png("Plot_raw_intensity.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
Plot_raw_intensity<-boxplot(rawData, cex.axis=0.5, las=2, which="all", col = c(rep("red", 3), rep("blue", 3), rep("green", 3),
rep("yellow", 3)), main="Distribution of raw intensity values")
Plot_raw_intensity
dev.off()
png("Plot_raw_intensity.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
boxplot(rawData, cex.axis=0.5, las=2, which="all", col = c(rep("red", 3), rep("blue", 3), rep("green", 3),
rep("yellow", 3)), main="Distribution of raw intensity values")
dev.off()
boxplot(rawData, cex.axis=0.5, las=2, which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3),
rep("yellow", 3)),
main="Distribution of raw intensity values")
png("Plot_raw_intensity.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
boxplot(rawData, cex.axis=0.5, las=2, which="all", col = c(rep("red", 3), rep("blue", 3), rep("green", 3),
rep("yellow", 3)), main="Distribution of raw intensity values")
dev.off()
eset_rma <- rma(rawData)
setwd("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data")
targets=read.csv("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data/targets.csv",header=TRUE,sep=";")
targets
knitr::kable(targets, booktabs = TRUE, caption = 'Content of the targets file used for the current analysis')
library(oligo)
celFiles = list.celfiles("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data", full.names = TRUE)
library(Biobase)
myTargets = read.AnnotatedDataFrame("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data/targets.csv",
header = TRUE, row.names = 1, sep=";")
rawData = read.celfiles(celFiles, phenoData = myTargets)
print(pData(rawData))
colnames(rawData) = myTargets@data$ShortName
head(rawData)
library(arrayQualityMetrics)
arrayQualityMetrics(rawData, outdir = "./Results/rawData_quality", force = T)
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) + ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue"))
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) + ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue","green","yellow"))
setwd("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data")
targets=read.csv("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data/targets.csv",header=TRUE,sep=";")
targets
knitr::kable(targets, booktabs = TRUE, caption = 'Content of the targets file used for the current analysis')
library(oligo)
celFiles = list.celfiles("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data", full.names = TRUE)
library(Biobase)
myTargets = read.AnnotatedDataFrame("D:/BIOESTADÍSTICA-INFORMÁTICA/Análisis de datos ómicos/data/targets.csv",
header = TRUE, row.names = 1, sep=";")
rawData = read.celfiles(celFiles, phenoData = myTargets)
print(pData(rawData))
colnames(rawData) = myTargets@data$ShortName
head(rawData)
library(arrayQualityMetrics)
arrayQualityMetrics(rawData, outdir = "./Results/rawData_quality", force = T)
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) + ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Groups,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue","green","yellow"))
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) + ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Groups,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue","green","yellow"))
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) + ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Groups,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue","green","pink"))
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) + ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue","green","pink"))
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) + ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue","green","yellow"))
png("PCA_RawData.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
PCA_RawData<-plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,  title="Raw data", scale = FALSE, size = 3, colores = c("red", "blue","green","yellow"))
PCA_RawData
dev.off()
boxplot(rawData, cex.axis=0.5, las=2, which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3),
rep("yellow", 3)),
main="Distribution of raw intensity values")
png("Plot_raw_intensity.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
boxplot(rawData, cex.axis=0.5, las=2, which="all", col = c(rep("red", 3), rep("blue", 3), rep("green", 3),
rep("yellow", 3)), main="Distribution of raw intensity values")
dev.off()
eset_rma <- rma(rawData)
arrayQualityMetrics(eset_rma, outdir = file.path("./results", "QCDir.Norm"), force=TRUE)
plotPCA3(exprs(eset_rma), labels = targets$ShortName, factor = targets$Group, title="Normalized data", scale = FALSE, size = 3,  colores = c("red", "blue", "green", "yellow"))
png("PCA_NormData.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
PCA_NormData<-plotPCA3(exprs(eset_rma), labels = targets$ShortName, factor = targets$Group, title="Normalized data", scale = FALSE, size = 3,  colores = c("red", "blue", "green", "yellow"))
PCA_NormData
dev.off()
boxplot(eset_rma, cex.axis=0.5, las=2,  which="all", col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)), main="Boxplot for arrays intensity: Normalized Data")
png("Plot_norm_intensity.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
boxplot(eset_rma, cex.axis=0.5, las=2,  which="all", col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)), main="Boxplot for arrays intensity: Normalized Data")
dev.off()
library(pvca)
pData(eset_rma) <- targets
#select the threshold
pct_threshold <- 0.6
#select the factors to analyze
batch.factors <- c("Genotype", "Temperature")
#run the analysis
pvcaObj <- pvcaBatchAssess (eset_rma, batch.factors, pct_threshold)
library(pvca)
pData(eset_rma) <- targets
#select the threshold
pct_threshold <- 0.6
#select the factors to analyze
batch.factors <- c("Genotype", "Temperature")
#run the analysis
pvcaObj <- pvcaBatchAssess (eset_rma, batch.factors, pct_threshold)
library(pvca)
pData(eset_rma) <- targets
#select the threshold
pct_threshold <- 0.6
#select the factors to analyze
batch.factors <- c("HealthStatus", "Trained","Time")
#run the analysis
pvcaObj <- pvcaBatchAssess (eset_rma, batch.factors, pct_threshold)
bp <- barplot(pvcaObj$dat, xlab = "Effects",
ylab = "Weighted average proportion variance",
ylim= c(0,1.1),col = c("mediumorchid"), las=2,
main="PVCA estimation")
axis(1, at = bp, labels = pvcaObj$label, cex.axis = 0.55, las=2)
values = pvcaObj$dat
new_values = round(values , 3)
text(bp,pvcaObj$dat,labels = new_values, pos=3, cex = 0.5)
sds <- apply (exprs(eset_rma), 1, sd)
sdsO<- sort(sds)
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes", sub="Vertical lines represent 90% and 95% percentiles", xlab="Gene index (from least to most variable)", ylab="Standard deviation")
abline(v=length(sds)*c(0.9,0.95))
png("PVCA_estimation.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
bp <- barplot(pvcaObj$dat, xlab = "Effects",
ylab = "Weighted average proportion variance",
ylim= c(0,1.1),col = c("mediumorchid"), las=2,
main="PVCA estimation")
axis(1, at = bp, labels = pvcaObj$label, cex.axis = 0.55, las=2)
values = pvcaObj$dat
new_values = round(values , 3)
text(bp,pvcaObj$dat,labels = new_values, pos=3, cex = 0.5)
dev.off()
png("PVCA_estimation.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
barplot(pvcaObj$dat, xlab = "Effects",
ylab = "Weighted average proportion variance",
ylim= c(0,1.1),col = c("mediumorchid"), las=2,
main="PVCA estimation")
axis(1, at = bp, labels = pvcaObj$label, cex.axis = 0.55, las=2)
values = pvcaObj$dat
new_values = round(values , 3)
text(bp,pvcaObj$dat,labels = new_values, pos=3, cex = 0.5)
dev.off()
png("Var_genes.png", width = 20, height = 12,
units = "cm", res = 600, pointsize = 10)
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes", sub="Vertical lines represent 90% and 95% percentiles", xlab="Gene index (from least to most variable)", ylab="Standard deviation")
abline(v=length(sds)*c(0.9,0.95))
dev.off()
library(genefilter)
library(mogene21sttranscriptcluster.db)
annotation(eset_rma) <- "mogene21sttranscriptcluster.db"
filtered <- nsFilter(eset_rma, require.entrez = TRUE, remove.dupEntrez = TRUE, var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
library(genefilter)
library(mogene21sttranscriptcluster.db)
filtered <- nsFilter(eset_rma, require.entrez=TRUE,
remove.dupEntrez=TRUE, var.func=IQR,
var.cutoff=0.5, var.filter=TRUE,
filterByQuantile=TRUE, feature.exclude="^AFFX")
library(genefilter)
library(mgu74av2.db)
library(genefilter)
install.packages(mgu74av2.db)
library(mgu74av2.db)
library(genefilter)
BiocManager::install("mgu74av2.db")
library(mgu74av2.db)
filtered <- nsFilter(eset_rma, require.entrez=TRUE,
remove.dupEntrez=TRUE, var.func=IQR,
var.cutoff=0.5, var.filter=TRUE,
filterByQuantile=TRUE, feature.exclude="^AFFX")
library(genefilter)
BiocManager::install("mgu74av2.db")
library(mgu74av2.db)
annotation(eset_rma) <- "mgu74av2.db"
> filtered <- nsFilter(eset_rma, require.entrez = TRUE, remove.dupEntrez = TRUE, var.filter=TRUE, var.func=IQR, var.cutoff=0.75, filterByQuantile=TRUE, feature.exclude = "^AFFX")
library(mgu74av2.db)
annotation(eset_rma) <- "mgu74av2.db"
filtered <- nsFilter(eset_rma, require.entrez = TRUE, remove.dupEntrez = TRUE, var.filter=TRUE, var.func=IQR, var.cutoff=0.75, filterByQuantile=TRUE, feature.exclude = "^AFFX")
library(mgu74av2.db)
annotation(eset_rma) <- "mgu74av2.db"
filtered <- nsFilter(eset_rma, require.entrez = TRUE, remove.dupEntrez = TRUE, var.filter=TRUE, var.func=IQR, var.cutoff=0.75, filterByQuantile=TRUE, feature.exclude = "^AFFX")
print(filtered$filter.log)
library(genefilter)
BiocManager::install("mgu74av2.db")
library(mgu74av2.db)
annotation(eset_rma) <- "mgu74av2.db"
filtered <- nsFilter(eset_rma, require.entrez = TRUE, remove.dupEntrez = TRUE, var.filter=TRUE, var.func=IQR, var.cutoff=0.75, filterByQuantile=TRUE, feature.exclude = "^AFFX")
print(filtered$filter.log)
eset_filtered <-filtered$eset
write.csv(exprs(eset_rma), file="./results/normalized.Data.csv") write.csv(exprs(eset_filtered), file="./results/normalized.Filtered.Data.csv")
library("readr")
write.csv(exprs(eset_rma), file="./results/normalized.Data.csv") write.csv(exprs(eset_filtered), file="./results/normalized.Filtered.Data.csv")
library("readr")
write.csv(exprs(eset_rma), file="./results/normalized.Data.csv") write.csv(exprs(eset_filtered), file="./results/normalized.Filtered.Data.csv")
library("readr")
write.csv(exprs(eset_rma), file="./results/normalized.Data.csv")
write.csv(exprs(eset_filtered), file="./results/normalized.Filtered.Data.csv")
save(eset_rma, eset_filtered, file="./results/normalized.Data.Rda")
if (!exists("eset_filtered")) load (file="./results/normalized.Data.Rda")
if (!exists("eset_filtered")) load (file="./results/normalized.Data.Rda")
library(limma)
designMat<- model.matrix(~0+Group, pData(eset_filtered))
colnames(designMat) <- c("Healthy.NoTrained", "Diabetic.NoTrained", "Diabetic.Trained", "Healthy.Trained")
print(designMat)
library(limma)
designMat<- model.matrix(~0+Group, pData(eset_filtered))
colnames(designMat) <- c("Healthy.NoTrained", "Diabetic.NoTrained", "Diabetic.Trained", "Healthy.Trained")
print(designMat)
library(limma)
designMat<- model.matrix(~0+Group, pData(eset_filtered))
colnames(designMat) <- c(Diabetic.Trained", "Diabetic.NoTrained", "Healthy.NoTrained", "Healthy.Trained")
library(limma)
designMat<- model.matrix(~0+Group, pData(eset_filtered))
colnames(designMat) <- c("Diabetic.Trained", "Diabetic.NoTrained", "Healthy.NoTrained", "Healthy.Trained")
print(designMat)
library(limma)
designMat<- model.matrix(~0+Group, pData(eset_filtered))
colnames(designMat) <- c("Diabetic.NoTrained", "Diabetic.Trained", "Healthy.NoTrained", "Healthy.Trained")
print(designMat)
cont.matrix <- makeContrasts (DiabeticvsHealthy.NoTrained = Diabetic.Notrained-Healthy.Notrained, DiabeticvsHealthy.Trained = Diabetic.Trained-Healthy.Trained, DiabeticTrainedvsDiabeticNoTrained = Diabetic.Notrained-Diabetic.Notrained, INT = (Diabetic.Trained-Healthy.Trained) - (Diabetic.NoTrained-Healthy.NoTrained), levels=designMat)
cont.matrix <- makeContrasts (DiabeticvsHealthy.NoTrained = Diabetic.NoTrained-Healthy.NoTrained, DiabeticvsHealthy.Trained = Diabetic.Trained-Healthy.Trained, DiabeticTrainedvsDiabeticNoTrained = Diabetic.Notrained-Diabetic.Notrained, INT = (Diabetic.Trained-Healthy.Trained) - (Diabetic.NoTrained-Healthy.NoTrained), levels=designMat)
cont.matrix <- makeContrasts (DiabeticvsHealthy.NoTrained = Diabetic.NoTrained-Healthy.NoTrained, DiabeticvsHealthy.Trained = Diabetic.Trained-Healthy.Trained, DiabeticTrainedvsDiabeticNoTrained = Diabetic.NoTrained-Diabetic.NoTrained, INT = (Diabetic.Trained-Healthy.Trained) - (Diabetic.NoTrained-Healthy.NoTrained), levels=designMat)
print(cont.matrix)
cont.matrix <- makeContrasts (DiabeticvsHealthy.NoTrained = Diabetic.NoTrained-Healthy.NoTrained, DiabeticvsHealthy.Trained = Diabetic.Trained-Healthy.Trained, DiabeticTrainedvsDiabeticNoTrained = Diabetic.NoTrained-Diabetic.NoTrained, DiabeticTrainedvsHealthyNoTrained = Diabetic.Trained-Healthy.NoTrained, INT = (Diabetic.Trained-Healthy.Trained) - (Diabetic.NoTrained-Healthy.NoTrained), levels=designMat)
print(cont.matrix)
library(limma)
fit<-lmFit(eset_filtered, designMat)
fit.main<-contrasts.fit(fit, cont.matrix)
fit.main<-eBayes(fit.main)
cont.matrix <- makeContrasts (TrainedvsNoTrained.Healthy = Healthy.Trained-Healthy.NoTrained, DiabeticvsControl.NoTrained = Diabetic.NoTrained-Healthy.NoTrained, DiabeticTrainedvsControl = Diabetic.Trained-Healthy.NoTrained, TrainedcvsNoTrained.Diabetic = Diabetic.Trained-Healthy.NoTrained, INT = (Diabetic.Trained-Healthy.Trained) - (Diabetic.NoTrained-Healthy.NoTrained), levels=designMat)
print(cont.matrix)
cont.matrix <- makeContrasts (TrainedvsNoTrained.Healthy = Healthy.Trained-Healthy.NoTrained, DiabeticvsControl.NoTrained = Diabetic.NoTrained-Healthy.NoTrained, DiabeticTrainedvsControl = Diabetic.Trained-Healthy.NoTrained, TrainedcvsNoTrained.Diabetic = Diabetic.Trained-Healthy.NoTrained, INT = (Diabetic.Trained-Healthy.Trained) - (Diabetic.NoTrained-Healthy.NoTrained), levels=designMat)
print(cont.matrix)
library(limma)
fit<-lmFit(eset_filtered, designMat)
fit.main<-contrasts.fit(fit, cont.matrix)
fit.main<-eBayes(fit.main)
class(fit.main)
topHealthy.TrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="TrainedvsNoTrained.Healthy", adjust="fdr") head(topHealthy.TrainedvsHealthy.NoTrained)
topHealthy.TrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="TrainedvsNoTrained.Healthy", adjust="fdr")) head(topHealthy.TrainedvsHealthy.NoTrained)
topHealthy.TrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="TrainedvsNoTrained.Healthy", adjust="fdr"))
topHealthy.TrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="TrainedvsNoTrained.Healthy", adjust="fdr")
head(topHealthy.TrainedvsHealthy.NoTrained)
#Comparision 2
topDiabetic.NoTrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="DiabeticvsControl.NoTrained", adjust="fdr")
head(topDiabetic.NoTrainedvsHealthy.NoTrained)
#Comparision 2
topDiabetic.NoTrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="DiabeticvsControl.NoTrained", adjust="fdr")
head(topDiabetic.NoTrainedvsHealthy.NoTrained)
#Comparision 3
topDiabetic.TrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="DiabeticTrainedvsControl", adjust="fdr")
head(topDiabetic.TrainedvsHealthy.NoTrained)
#Comparision 4
topDiabetic.TrainedvsDiabetic.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="TrainedcvsNoTrained.Diabetic", adjust="fdr")
head(topDiabetic.TrainedvsDiabetic.NoTrained)
#Comparision 1
topHealthy.TrainedvsHealthy.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="TrainedvsNoTrained.Healthy", adjust="fdr")
head(topHealthy.TrainedvsHealthy.NoTrained)
#Comparision 4
topDiabetic.TrainedvsDiabetic.NoTrained <- topTable (fit.main, number=nrow(fit.main), coef="TrainedcvsNoTrained.Diabetic", adjust="fdr")
head(topDiabetic.TrainedvsDiabetic.NoTrained)
topTab_INT  <- topTable (fit.main, number=nrow(fit.main), coef="INT", adjust="fdr")
head(topTab_INT)
annotatedTopTable <- function(topTab, anotPackage)
{
topTab <- cbind(PROBEID=rownames(topTab), topTab)
myProbes <- rownames(topTab)
thePackage <- eval(parse(text = anotPackage))
geneAnots <- select(thePackage, myProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
annotatedTopTab<- merge(x=geneAnots, y=topTab, by.x="PROBEID", by.y="PROBEID")
return(annotatedTopTab)
annotatedTopTable <- function(topTab, anotPackage)
{
topTab <- cbind(PROBEID=rownames(topTab), topTab)
myProbes <- rownames(topTab)
thePackage <- eval(parse(text = anotPackage))
geneAnots <- select(thePackage, myProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
annotatedTopTab<- merge(x=geneAnots, y=topTab, by.x="PROBEID", by.y="PROBEID")
return(annotatedTopTab)
}
annotatedTopTable <- function(topTab, anotPackage)
{
topTab <- cbind(PROBEID=rownames(topTab), topTab)
myProbes <- rownames(topTab)
thePackage <- eval(parse(text = anotPackage))
geneAnots <- select(thePackage, myProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
annotatedTopTab<- merge(x=geneAnots, y=topTab, by.x="PROBEID", by.y="PROBEID")
return(annotatedTopTab)
}
topAnnotated_HealthyTrainedvsHealthy.NoTrained<- annotatedTopTable(topHealthy.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.NoTrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsDiabetic.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_INT<- annotatedTopTable(topTab_INT, anotPackage="mgu74av2.db")
write.csv(topAnnotated_HealthyTrainedvsHealthy.NoTrained, file="./results/topAnnotated_HealthyTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.TrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained.csv") write.csv(topAnnotated_INT, file="./results/topAnnotated_INT.csv")
topAnnotated_HealthyTrainedvsHealthy.NoTrained<- annotatedTopTable(topHealthy.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.NoTrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsDiabetic.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_INT<- annotatedTopTable(topTab_INT, anotPackage="mgu74av2.db")
write.csv(topAnnotated_HealthyTrainedvsHealthy.NoTrained, file="./results/topAnnotated_HealthyTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.TrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsHealthy.NoTrained.csv")
Write.csv(topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained.csv") write.csv(topAnnotated_INT, file="./results/topAnnotated_INT.csv")
topAnnotated_HealthyTrainedvsHealthy.NoTrained<- annotatedTopTable(topHealthy.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.NoTrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsDiabetic.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_INT<- annotatedTopTable(topTab_INT, anotPackage="mgu74av2.db")
write.csv(topAnnotated_HealthyTrainedvsHealthy.NoTrained, file="./results/topAnnotated_HealthyTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.TrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsHealthy.NoTrained.csv")
topAnnotated_HealthyTrainedvsHealthy.NoTrained<- annotatedTopTable(topHealthy.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.NoTrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsDiabetic.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_INT<- annotatedTopTable(topTab_INT, anotPackage="mgu74av2.db")
write.csv(topAnnotated_HealthyTrainedvsHealthy.NoTrained, file="./results/topAnnotated_HealthyTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.TrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsHealthy.NoTrained.csv")
Write.csv(topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained.csv")
topAnnotated_HealthyTrainedvsHealthy.NoTrained<- annotatedTopTable(topHealthy.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.NoTrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsDiabetic.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_INT<- annotatedTopTable(topTab_INT, anotPackage="mgu74av2.db")
write.csv(topAnnotated_HealthyTrainedvsHealthy.NoTrained, file="./results/topAnnotated_HealthyTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.TrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsHealthy.NoTrained.csv")
Write.csv(topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained.csv")
topAnnotated_HealthyTrainedvsHealthy.NoTrained<- annotatedTopTable(topHealthy.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.NoTrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsHealthy.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsHealthy.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained<- annotatedTopTable(topDiabetic.TrainedvsDiabetic.NoTrained, anotPackage="mgu74av2.db")
topAnnotated_INT<- annotatedTopTable(topTab_INT, anotPackage="mgu74av2.db")
write.csv(topAnnotated_HealthyTrainedvsHealthy.NoTrained, file="./results/topAnnotated_HealthyTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.NoTrainedvsHealthy.NoTrained.csv")
write.csv(topAnnotated_Diabetic.TrainedvsHealthy.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsHealthy.NoTrained.csv")
Write.csv(topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained, file="./results/topAnnotated_Diabetic.TrainedvsDiabetic.NoTrained.csv")
